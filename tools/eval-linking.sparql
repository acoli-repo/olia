# should be applied to plain sequences of tags
# expect conll:POS to hold the current tag
# generate conll:TGT
# note that this can also be used for decoding OLiA against a particular tagset

prefix rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#> 
prefix conll: <http://ufal.mff.cuni.cz/conll2009-st/task-description.html#> 
prefix rdfs:  <http://www.w3.org/2000/01/rdf-schema#> 
prefix nif:   <http://persistence.uni-leipzig.org/nlp2rdf/ontologies/nif-core#> 
prefix system: <http://purl.org/olia/system.owl#>
prefix owl: <http://www.w3.org/2002/07/owl#>

# retrieve all OLiA superclasses for SRC
INSERT {
	?w conll:OLIA ?c
} WHERE {
	GRAPH <http://purl.org/olia/src> {
		?x system:hasTag ?p .
		?x a/(rdfs:subClassOf|owl:equivalentClass|owl:sameAs|((owl:intersectionOf|owl:unionOf)/rdf:rest*/rdf:first))* ?c .
		FILTER(contains(str(?c),'olia.owl#'))
	}
	?w a nif:Word;
		conll:POS ?p.
};	

# retrieve all OLiA superclasses for SRC
INSERT {
	?w conll:OLIA ?c
} WHERE {
	GRAPH <http://purl.org/olia/src> {
		?x system:hasTag ?p .
		?x a/(rdfs:subClassOf|owl:equivalentClass|owl:sameAs|((owl:intersectionOf|owl:unionOf)/rdf:rest*/rdf:first))* ?c .
		FILTER(contains(str(?c),'olia-top.owl#'))
	}
	?w a nif:Word;
		conll:POS ?p.
	FILTER(NOT EXISTS { ?w conll:OLIA [] })
};	


# reduce OLiA superclasses to those that do not have an OLiA subclass among the candidates
DELETE {
	?w conll:OLIA ?d
} WHERE {
	?w conll:OLIA ?c, ?d.
	GRAPH <http://purl.org/olia/olia.owl> {
		?c (rdfs:subClassOf|owl:equivalentClass|owl:sameAs|((owl:intersectionOf|owl:unionOf)/rdf:rest*/rdf:first))+ ?d .
	}
};	

# for TGT graph: retrieve exact tags 
INSERT {
	?w conll:TGT ?p
} WHERE {
	?w conll:OLIA ?u.
	GRAPH <http://purl.org/olia/src> {
		?x system:hasTag ?p .
		?x a ?o.
		?o (rdfs:subClassOf|owl:equivalentClass|owl:sameAs|((owl:intersectionOf|owl:unionOf)/rdf:rest*/rdf:first))* ?u .
		FILTER(NOT EXISTS { 
			?o (rdfs:subClassOf|owl:equivalentClass|owl:sameAs|((owl:intersectionOf|owl:unionOf)/rdf:rest*/rdf:first))+ ?tmp.
			?tmp (rdfs:subClassOf|owl:equivalentClass|owl:sameAs|((owl:intersectionOf|owl:unionOf)/rdf:rest*/rdf:first))+ ?u.
			[ a ?tmp ] system:hasTag ?q.
		})
	}
};


# for TGT graph: retrieve all more specific tags
INSERT {
	?w conll:TGT ?p
} WHERE {
	?w conll:OLIA ?u.
	FILTER(NOT EXISTS { ?w conll:TGT [] })
	GRAPH <http://purl.org/olia/olia.owl> {
		?o (rdfs:subClassOf|owl:equivalentClass|owl:sameAs|((owl:intersectionOf|owl:unionOf)/rdf:rest*/rdf:first))+ ?u .
	}
	GRAPH <http://purl.org/olia/src> {
		?x system:hasTag ?p .
		?x a/(rdfs:subClassOf|owl:equivalentClass|owl:sameAs|((owl:intersectionOf|owl:unionOf)/rdf:rest*/rdf:first))* ?o .
	}
};

# for TGT graph: retrieve more general tags
INSERT {
	?w conll:TGT ?p
} WHERE {
	?w conll:OLIA ?o.
	FILTER(NOT EXISTS { ?w conll:TGT [] })
	GRAPH <http://purl.org/olia/olia.owl> {
		?o (rdfs:subClassOf|owl:equivalentClass|owl:sameAs|((owl:intersectionOf|owl:unionOf)/rdf:rest*/rdf:first))* ?u .
	}
	GRAPH <http://purl.org/olia/src> {
		?x system:hasTag ?p .
		?x a/(rdfs:subClassOf|owl:equivalentClass|owl:sameAs|((owl:intersectionOf|owl:unionOf)/rdf:rest*/rdf:first))+ ?u .
	}
	MINUS {
		GRAPH <http://purl.org/olia/olia.owl> {
			?o (rdfs:subClassOf|owl:equivalentClass|owl:sameAs|((owl:intersectionOf|owl:unionOf)/rdf:rest*/rdf:first))+ ?v .
			?v (rdfs:subClassOf|owl:equivalentClass|owl:sameAs|((owl:intersectionOf|owl:unionOf)/rdf:rest*/rdf:first))+ ?u .
		}
		GRAPH <http://purl.org/olia/src> {
			?x system:hasTag ?p .
			?x a/(rdfs:subClassOf|owl:equivalentClass|owl:sameAs|((owl:intersectionOf|owl:unionOf)/rdf:rest*/rdf:first))+ ?v .
		}
	}
};

# # for every unanalyzed tag with an OLiA interpretation: attach all src tags that aren't used
# INSERT {
	# ?w conll:TGT ?p
# } WHERE {
	# ?w #a nif:Word. # 
		# conll:OLIA ?o.
	# FILTER(NOT EXISTS { ?w conll:TGT [] })
	# GRAPH <http://purl.org/olia/src> {
		# [] system:hasTag ?p
	# } 
	# MINUS { [a nif:Word ] conll:TGT ?p }
# };

########################
# prune TGT candidates # more fitting OLiA concepts > less matching OLiA concepts
########################

# reify and rank TGT candidates: number of OLiA concepts from the word that they match to
INSERT {
	[ a rdf:Statement ] rdf:subject ?w; rdf:predicate conll:TGT; rdf:object ?p; conll:RANK ?rank
} WHERE {
	?w conll:TGT ?p,?q.    # only if more than one TGT
	?w conll:OLIA ?o1,?o2. # only if more than one OLiA concept
	{ SELECT ?w ?p (COUNT(distinct ?o) AS ?rank)
	  WHERE { ?w conll:TGT ?p; conll:OLIA ?o.
			  GRAPH <http://purl.org/olia/olia.owl> {
				?o (rdfs:subClassOf|owl:equivalentClass|owl:sameAs|((owl:intersectionOf|owl:unionOf)/rdf:rest*/rdf:first))* ?u .
			  }
			  GRAPH <http://purl.org/olia/src> {
				?x system:hasTag ?p .
				?x a/(rdfs:subClassOf|owl:equivalentClass|owl:sameAs|((owl:intersectionOf|owl:unionOf)/rdf:rest*/rdf:first))+ ?u .
			  }
		} GROUP BY ?w ?p 
	}
};

# drop TGT candidates with non-maximal rank
DELETE {
	?w conll:TGT ?p
} WHERE {
	?w conll:TGT ?p, ?q.
	[ rdf:predicate conll:TGT; rdf:subject ?w; rdf:object ?p ] conll:RANK ?rP.
	[ rdf:predicate conll:TGT; rdf:subject ?w; rdf:object ?q ] conll:RANK ?rQ.
	FILTER(?rP < ?rQ)
};

# un-reify conll:TGT
DELETE {
	?s a rdf:Statement; rdf:subject ?w; rdf:predicate conll:TGT; rdf:object ?p; conll:RANK ?rank
} WHERE {
	?s a rdf:Statement; rdf:subject ?w; rdf:predicate conll:TGT; rdf:object ?p; conll:RANK ?rank
};

########################
# prune TGT candidates # prefer TGTs with fewer OLiA superclasses (e.g., the most general one)
########################

# reify and rank TGT candidates: number of OLiA concepts from the word that they match to
INSERT {
	[ a rdf:Statement ] rdf:subject ?w; rdf:predicate conll:TGT; rdf:object ?p; conll:RANK ?rank
} WHERE {
	?w conll:TGT ?p,?q.    # only if more than one TGT
	{ SELECT ?w ?p (COUNT(distinct ?o) AS ?rank)
	  WHERE { ?w conll:TGT ?p.
			  GRAPH <http://purl.org/olia/olia.owl> {
				?o ?prop []. # must be defined in olia
				?o (rdfs:subClassOf|owl:equivalentClass|owl:sameAs|((owl:intersectionOf|owl:unionOf)/rdf:rest*/rdf:first))* ?u .
				FILTER(!isblank(?o))
			  }
			  GRAPH <http://purl.org/olia/src> {
				?x system:hasTag ?p .
				?x a/(rdfs:subClassOf|owl:equivalentClass|owl:sameAs|((owl:intersectionOf|owl:unionOf)/rdf:rest*/rdf:first))+ ?u .
			  }
		} GROUP BY ?w ?p 
	}
};

# drop TGT candidates with non-minimal rank (the most specific ones)
DELETE {
	?w conll:TGT ?p
} WHERE {
	?w conll:TGT ?p, ?q.
	[ rdf:predicate conll:TGT; rdf:subject ?w; rdf:object ?p ] conll:RANK ?rP.
	[ rdf:predicate conll:TGT; rdf:subject ?w; rdf:object ?q ] conll:RANK ?rQ.
	FILTER(?rP > ?rQ)
};

# un-reify conll:TGT
DELETE {
	?s a rdf:Statement; rdf:subject ?w; rdf:predicate conll:TGT; rdf:object ?p; conll:RANK ?rank
} WHERE {
	?s a rdf:Statement; rdf:subject ?w; rdf:predicate conll:TGT; rdf:object ?p; conll:RANK ?rank
};

########################
# prune TGT candidates # prefer TGTs with fewer anno model superclasses (e.g., the most general one)
########################

# reify and rank TGT candidates: number of OLiA concepts from the word that they match to
INSERT {
	[ a rdf:Statement ] rdf:subject ?w; rdf:predicate conll:TGT; rdf:object ?p; conll:RANK ?rank
} WHERE {
	?w conll:TGT ?p,?q.    # only if more than one TGT
	{ SELECT ?w ?p (COUNT(distinct ?u) AS ?rank)
	  WHERE { ?w conll:TGT ?p.
			  GRAPH <http://purl.org/olia/src> {
				?x system:hasTag ?p .
				?x a/(rdfs:subClassOf|owl:equivalentClass|owl:sameAs|((owl:intersectionOf|owl:unionOf)/rdf:rest*/rdf:first))+ ?u .
				FILTER(!isblank(?u))
			  }
		} GROUP BY ?w ?p 
	}
};

# drop TGT candidates with non-minimal rank (the most specific ones)
DELETE {
	?w conll:TGT ?p
} WHERE {
	?w conll:TGT ?p, ?q.
	[ rdf:predicate conll:TGT; rdf:subject ?w; rdf:object ?p ] conll:RANK ?rP.
	[ rdf:predicate conll:TGT; rdf:subject ?w; rdf:object ?q ] conll:RANK ?rQ.
	FILTER(?rP > ?rQ)
};

# un-reify conll:TGT
DELETE {
	?s a rdf:Statement; rdf:subject ?w; rdf:predicate conll:TGT; rdf:object ?p; conll:RANK ?rank
} WHERE {
	?s a rdf:Statement; rdf:subject ?w; rdf:predicate conll:TGT; rdf:object ?p; conll:RANK ?rank
};



#################
# write results #
#################

# consolidate multiple entries for TGT in one |-separated string
INSERT {
	?w conll:TGT ?merged
} WHERE {
	{ SELECT ?w (GROUP_CONCAT(distinct ?p; separator=", ") as ?merged)
	  WHERE {
		?w conll:TGT ?p
		FILTER(strlen(?p)>0)
	  } GROUP BY ?w ORDER BY ?w ?p 
	}
};

# remove individual TGT values
DELETE {
	?w conll:TGT ?x
} WHERE {
	?w conll:TGT ?x,?y.
	FILTER(strlen(?x)<strlen(?y))
};

# consolidate multiple entries for OLIA in one |-separated string
INSERT {
	?w conll:OLIA ?merged
} WHERE {
	{ SELECT ?w (GROUP_CONCAT(distinct ?o; separator=", ") as ?merged)
	  WHERE {
		?w conll:OLIA ?p.
		BIND(str(?p) as ?o)
	  } GROUP BY ?w ORDER BY ?w ?o 
	}
};

# remove individual OLIA values
DELETE {
	?w conll:OLIA ?x
} WHERE {
	?w conll:OLIA ?x,?y.
	FILTER(strlen(str(?x))<strlen(str(?y)))
};

# remove non-string values of OLIA (because these are replicated as strings)
DELETE {
	?w conll:OLIA ?x
} WHERE {
	?w conll:OLIA ?x,?y.
	FILTER(!isLiteral(?x))
};