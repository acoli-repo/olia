<?xml version="1.0"?>
<rdf:RDF
    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
    xmlns:xsd="http://www.w3.org/2001/XMLSchema#"
    xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#"
    xmlns:owl="http://www.w3.org/2002/07/owl#"
    xmlns="http://purl.org/olia/discourse/coref.ARRAU.owl#"
  xml:base="http://purl.org/olia/discourse/coref.ARRAU.owl">
  <owl:Ontology rdf:about="http://purl.org/olia/discourse/coref.ARRAU.owl">
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >ARRAU Annotation manual
(TRAINS dialogues)
Ron Artstein and Massimo Poesio
June 23, 2006

The goal of this annotation is to collect data about the way context is constructed
and used in natural language, particularly in relation to two phenomena
normally called (nominal) anaphora and deictic reference.</rdfs:comment>
    <owl:versionInfo rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >2008-04-10 created
	2008-05-23 revision
	2012-02-10 SourceForge submission
	TODO: linked with olia_discourse.owl
	
	Christian Chiarcos, christian.chiarcos@web.de</owl:versionInfo>
  </owl:Ontology>
  <owl:Class rdf:ID="MapObject">
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >An object on the map used for deictic references.
Language expressions may also depend on the visual, as opposed to verbal,
context. An utterance like Could you pass me the salt? , uttered, e.g.,
at a restaurant, is usually understandable even if salt hasn’t been mentioned
before; the recipient can recover the referent of the expression the salt from
the visual context. (An even clearer example is Could you please close
the window? .) We will use the term deictic references to refer to these
expressions.</rdfs:comment>
    <rdfs:subClassOf>
      <owl:Class rdf:ID="Object"/>
    </rdfs:subClassOf>
  </owl:Class>
  <owl:Class rdf:ID="RelatedObject">
    <rdfs:subClassOf>
      <owl:Class rdf:ID="Attribute"/>
    </rdfs:subClassOf>
    <rdfs:subClassOf>
      <owl:Restriction>
        <owl:onProperty>
          <owl:DatatypeProperty rdf:ID="hasTier"/>
        </owl:onProperty>
        <owl:hasValue rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
        >related_object</owl:hasValue>
      </owl:Restriction>
    </rdfs:subClassOf>
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >19 The next attribute, related_object, is to be set to “yes” when the markable
is a bridging reference in the sense discussed above. When you do so,
you should also indicate the most recent mention of an object to which
the reference of the markable is related</rdfs:comment>
  </owl:Class>
  <owl:Class rdf:ID="NewReferringExpression">
    <owl:equivalentClass>
      <owl:Class>
        <owl:intersectionOf rdf:parseType="Collection">
          <owl:Restriction>
            <owl:onProperty>
              <owl:ObjectProperty rdf:ID="hasAntecedent"/>
            </owl:onProperty>
            <owl:cardinality rdf:datatype="http://www.w3.org/2001/XMLSchema#int"
            >0</owl:cardinality>
          </owl:Restriction>
          <owl:Restriction>
            <owl:hasValue>
              <Reference rdf:ID="new">
                <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
                >A term-denoting markable which in your opinion is the first mention
in the dialogue of a concrete or abstract object. This value should
also be used for markables that you want to mark as referring to an
object associated with a previously mentioned object (see below).</rdfs:comment>
                <hasTag rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
                >new</hasTag>
              </Reference>
            </owl:hasValue>
            <owl:onProperty>
              <owl:ObjectProperty rdf:ID="hasReference"/>
            </owl:onProperty>
          </owl:Restriction>
        </owl:intersectionOf>
      </owl:Class>
    </owl:equivalentClass>
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >has no textual antecedent</rdfs:comment>
    <rdfs:subClassOf>
      <owl:Class rdf:ID="TermDenotingNounPhrase"/>
    </rdfs:subClassOf>
  </owl:Class>
  <owl:Class rdf:ID="BridgingType">
    <rdfs:subClassOf>
      <owl:Class rdf:about="#Attribute"/>
    </rdfs:subClassOf>
    <rdfs:subClassOf>
      <owl:Restriction>
        <owl:onProperty rdf:resource="#hasTier"/>
        <owl:hasValue rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
        >Related</owl:hasValue>
      </owl:Restriction>
    </rdfs:subClassOf>
  </owl:Class>
  <owl:Class rdf:ID="Expletive">
    <rdfs:subClassOf>
      <owl:Class rdf:ID="NonDenotingNounPhrase"/>
    </rdfs:subClassOf>
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >A second fairly clear case of NPs that do not denote terms are certain uses of
the pronominal expressions there and it . These words can be (and often are)
used to refer to objects, as in the following two examples:
My brother finally bought a dog. [It] is a big grey
Alsatian. (it = “the dog that my brother bought”)
To meet Prof. Rodgers, go to the NLP Lab. [He] is often
[there] at this time of the day.
(he = “Prof. Rodgers”, there = “the NLP Lab”)
However, in other cases, it and there only serve as ‘placeholders’ (in these
cases, these words are called expletives). In the first example below, it does
not refer to anything: it is only there because of the syntactic requirement that
English finite clauses need to have a subject even when the underlying predicate
does not have an argument to be filled by this subject. there in the second
example is there for the same reason.
[It] takes an hour to get to Corning
[There] are two boxcars in Bath</rdfs:comment>
    <owl:equivalentClass>
      <owl:Restriction>
        <owl:onProperty>
          <owl:ObjectProperty rdf:ID="hasNonRefType"/>
        </owl:onProperty>
        <owl:hasValue>
          <NonReferringType rdf:ID="expletive">
            <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
            >The markable is the word there or it used as placeholder.
Choose the value “Expletive” if you think this is the case.
[There] are two boxcars in Bath
(= “two boxcars are in Bath”)
[It] takes an hour to get to Corning
(= “to get to Corning takes an hour”)</rdfs:comment>
            <hasTag rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
            >Expletive</hasTag>
          </NonReferringType>
        </owl:hasValue>
      </owl:Restriction>
    </owl:equivalentClass>
  </owl:Class>
  <owl:Class rdf:ID="Reference">
    <rdfs:subClassOf>
      <owl:Class rdf:about="#Attribute"/>
    </rdfs:subClassOf>
    <rdfs:subClassOf>
      <owl:Restriction>
        <owl:onProperty rdf:resource="#hasTier"/>
        <owl:hasValue rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
        >Reference</owl:hasValue>
      </owl:Restriction>
    </rdfs:subClassOf>
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >The attribute Reference is used to specify whether a markable is termdenoting
or not. This attribute takes one of the following values: “new”,
“old”, or “non referring”.</rdfs:comment>
  </owl:Class>
  <owl:Class rdf:ID="BridgingReference">
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >(Anaphoric) context dependence can be more complex than in the example
just seen. Some expressions derive their meaning from the linguistic context
not in that they refer to an object already mentioned, but because they refer
to entities which, while new in the discourse, are nevertheless tightly related to
objects previously mentioned, in such a way that their reference would not be
understandable if such relation wasn’t apparent. An example is shown below:
the wheel refers to an object which hasn’t been mentioned before in the
dialogue, but it is nevertheless understandable because it is a part of an object –
the boxcar at Elmira – mentioned in the previous sentence.
S: Bad news about [the boxcar at Elmira]. [They] tell me
[the wheel] is broken and will have to be fixed
These expressions are usually called bridging references as the listener is required
to ‘bridge’ the gap by identifying which relation holds between the expression
and which previous expression.

In most cases, the bridging reference refers to an object not previously mentioned
in the dialogue. In these cases, you should first choose “New” as the value of
Reference, then specify that the markable is “Related” to a previous object.
After you’ve done this, you’ll be able to identify the antecedent using a pointer.
In a few cases, you’ll find that the bridging reference refers to an object
which has already been mentioned. In these cases, you should always choose
the value “Old” and identify the antecedent. However, you should also set the
10
Related value if the antecedent is further away than the object to which the
markable is related.</rdfs:comment>
    <rdfs:subClassOf>
      <owl:Restriction>
        <owl:minCardinality rdf:datatype="http://www.w3.org/2001/XMLSchema#int"
        >1</owl:minCardinality>
        <owl:onProperty>
          <owl:ObjectProperty rdf:ID="hasRelatedObject"/>
        </owl:onProperty>
      </owl:Restriction>
    </rdfs:subClassOf>
    <owl:equivalentClass>
      <owl:Class>
        <owl:intersectionOf rdf:parseType="Collection">
          <owl:Restriction>
            <owl:onProperty>
              <owl:ObjectProperty rdf:ID="hasAttributeValue"/>
            </owl:onProperty>
            <owl:hasValue>
              <RelatedObject rdf:ID="relatedObject">
                <hasTag rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
                >yes</hasTag>
                <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
                >19 The next attribute, related_object, is to be set to “yes” when the markable
is a bridging reference in the sense discussed above. When you do so,
you should also indicate the most recent mention of an object to which
the reference of the markable is related</rdfs:comment>
              </RelatedObject>
            </owl:hasValue>
          </owl:Restriction>
          <owl:Restriction>
            <owl:onProperty>
              <owl:ObjectProperty rdf:ID="hasBridgingType"/>
            </owl:onProperty>
            <owl:cardinality rdf:datatype="http://www.w3.org/2001/XMLSchema#int"
            >1</owl:cardinality>
          </owl:Restriction>
          <owl:Class rdf:about="#TermDenotingNounPhrase"/>
        </owl:intersectionOf>
      </owl:Class>
    </owl:equivalentClass>
  </owl:Class>
  <owl:Class rdf:ID="ReferenceType">
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >The next attribute (of an "old" referent) is used to specify the reference type of the markable.
The meanings of the values are:
phrase: Use this value if the markable refers to an object which was
already mentioned using a markable. E.g.,
M: I want you to take [a boxcar] from [Elmira] and
load [it] with [oranges]
it refers to the
same object as a
boxcar
segment: Use this value if the markable refers to an abstract object – for
instance a plan, event, action, or fact – which was discussed in an
earlier segment of the dialogue, but not referred to using a markable.
M: Take [engine E1] to get [the boxcar] to Elmira. this refers to the
plan in the previous
utterance by M
S: All right, [this] will take one hour
Note: subsequent references to the same abstract object should now
be marked as “phrase”, since the object discussed in the segment
has now been mentioned using a markable.</rdfs:comment>
    <rdfs:subClassOf>
      <owl:Class rdf:about="#Attribute"/>
    </rdfs:subClassOf>
    <rdfs:subClassOf>
      <owl:Restriction>
        <owl:hasValue rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
        >reference type</owl:hasValue>
        <owl:onProperty rdf:resource="#hasTier"/>
      </owl:Restriction>
    </rdfs:subClassOf>
  </owl:Class>
  <owl:Class rdf:ID="QuantifiedNounPhrase">
    <owl:equivalentClass>
      <owl:Restriction>
        <owl:onProperty>
          <owl:ObjectProperty rdf:about="#hasNonRefType"/>
        </owl:onProperty>
        <owl:hasValue>
          <NonReferringType rdf:ID="quantifier">
            <hasTag rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
            >quantifier</hasTag>
          </NonReferringType>
        </owl:hasValue>
      </owl:Restriction>
    </owl:equivalentClass>
    <rdfs:subClassOf>
      <owl:Class rdf:ID="NounPhrase"/>
    </rdfs:subClassOf>
    <rdfs:subClassOf>
      <owl:Restriction>
        <owl:hasValue>
          <Reference rdf:ID="non_referring">
            <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
            >A markable which does not refer to an object, whether
concrete or abstract.</rdfs:comment>
            <hasTag rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
            >non_referring</hasTag>
          </Reference>
        </owl:hasValue>
        <owl:onProperty>
          <owl:ObjectProperty rdf:about="#hasReference"/>
        </owl:onProperty>
      </owl:Restriction>
    </rdfs:subClassOf>
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >A fourth type of noun phrases that do not denote terms are quantified NPs.
These include so-called wh-NPs, such as which route in
and then [which route] do you wanna take?
In this case it is fairly clear that the speaker is not referring to any object. Other
examples of wh-NPs are where as in where is the engine now but also how
long and how many oranges . Examples of quantifiers proper include all of
the boxcars in
are [all of the boxcars] empty?
other quantifiers include expressions with the determiners every , as in everything ;
any , as in any of the boxcars but also anything ; and each , few , many ,
most .
Quantified NPs are used to indicate the proportion of individuals of a set
that has a certain property. They are never anaphoric in the sense we just
discussed, so they should be marked in a special way using the reference attribute;
however, the set itself (the domain of quantification) sometimes can
be anaphoric. This domain of quantification can be indicated in two ways: either
by means of a second NP, as in all this / any of the boxcars or by
means of nouns, as in any orange juice . In the first case there should be
two markables:
[all [this]]
[any of [the boxcars]]
so you can identify the domain of quantification as anaphoric, if necessary, by
marking the markable embedded in the quantified NP. In the second case you
should introduce a new markable:
[any [orange juice]]</rdfs:comment>
  </owl:Class>
  <owl:Class rdf:about="#NonDenotingNounPhrase">
    <rdfs:subClassOf>
      <owl:Class rdf:about="#NounPhrase"/>
    </rdfs:subClassOf>
    <rdfs:subClassOf>
      <owl:Restriction>
        <owl:onProperty>
          <owl:ObjectProperty rdf:about="#hasReference"/>
        </owl:onProperty>
        <owl:hasValue rdf:resource="#non_referring"/>
      </owl:Restriction>
    </rdfs:subClassOf>
  </owl:Class>
  <owl:Class rdf:ID="IdiomaticNounPhrase">
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >It is important however to realize that not all NPs are term-denoting. Perhaps
the clearest case of non-denoting NPs are NPs occuring in idioms such as what
the heck . In this idiom, the NP the heck does not refer to anything – i.e.,
the meaning of the idiom is not derived from the meaning of the expression
the heck . Other idioms containing non-denoting NPs are what a pain in
the butt (in which neither a pain nor the butt really refer to anything) or
kicked the bucket (in which the bucket does not refer to any object in
particular.</rdfs:comment>
    <rdfs:subClassOf rdf:resource="#NonDenotingNounPhrase"/>
    <owl:equivalentClass>
      <owl:Restriction>
        <owl:onProperty>
          <owl:ObjectProperty rdf:about="#hasNonRefType"/>
        </owl:onProperty>
        <owl:hasValue>
          <NonReferringType rdf:ID="idiom">
            <hasTag rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
            >idiom</hasTag>
            <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
            >The markable is part of an idiom, as in what [the heck ]. Use
the value “idiom” in this case.</rdfs:comment>
          </NonReferringType>
        </owl:hasValue>
      </owl:Restriction>
    </owl:equivalentClass>
  </owl:Class>
  <owl:Class rdf:ID="Predicative">
    <owl:equivalentClass>
      <owl:Restriction>
        <owl:onProperty>
          <owl:ObjectProperty rdf:about="#hasNonRefType"/>
        </owl:onProperty>
        <owl:hasValue>
          <NonReferringType rdf:ID="predicate">
            <hasTag rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
            >Predicate</hasTag>
          </NonReferringType>
        </owl:hasValue>
      </owl:Restriction>
    </owl:equivalentClass>
    <rdfs:subClassOf>
      <owl:Class rdf:about="#NounPhrase"/>
    </rdfs:subClassOf>
    <rdfs:subClassOf>
      <owl:Restriction>
        <owl:onProperty>
          <owl:ObjectProperty rdf:about="#hasReference"/>
        </owl:onProperty>
        <owl:hasValue rdf:resource="#non_referring"/>
      </owl:Restriction>
    </rdfs:subClassOf>
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >In the cases seen so far, the NP did not have a meaning at all. However,
NPs may be non term-denoting even in some cases in which they do have a
semantic meaning. For instance, in the example above, when we utter it is
a big grey Alsatian , the NP a big grey Alsatian does have a meaning,
but it is not used to introduce a second entity in the discourse, and it
does not function as an argument of a predicate; rather, it is used to express
a property of the dog that my brother bought. This is also the case
for the NP the best chess-player in the school in Hillary is the
best chess-player in the school . Again, the function of this NP is to
ascribe a property to Hillary, not to introduce a new object in the discourse. In
general, in most copular clauses (clauses whose main verb is to be , as in the
two examples just discussed) either the subject or the object is a noun phrase
used to express a property.
Another costruction in which NPs often serve as predicates are apposi-
tions – non-restrictive nominal modifications typically expressed using parentheticals.
An example of apposition is the NP my nephew in
Carlo, [my nephew], is [a terror]
In this example, both the NPs my nephew and a terror express predicates,
and therefore are not term denoting, whereas Carlo is term-denoting.
The test that you should use to decide whether an NP in one of the positions
just discussed is predicative is to ask yourself whether the text is talking about
two objects or just one. This test works reasonably well; however, you will find
that in some cases it is difficult to identify which of the NPs in the clause is
term-denoting and which instead is predicative. Both in the case of copular
clauses and in the case of appositions you only need to consider one of the NPs
as term-denoting. In order to decide which of these two NPs is term-denoting
and which is a predicate, try to think which of the two could be viewed as a
property of the other; but if you find you can’t decide do not worry too much,
just make sure you only include one in the coreference chain.
Apart from copular sentences and appositions, the NPs that are best viewed
as expressing predicates or predicate modifiers are those that occur in locative
expressions such as “to the left”, or “go North”, very common in some types
of dialogue. “the left” and “North” are NPs, but in these examples the whole
locative expression is best viewed as an adverbial not referring to any particular
object. So you should not be concerned with marking such noun phrases as
6
deictic or anaphoric, the only exception being cases of anaphoric expressions
explicitly referring to directions.
The interpretation of predicate NPs may also depend on context, but in this
study we are not concerned with these dependencies. So you should not try to
annotate anaphoric and deictic information (we will explain in a moment how
this is to be done) about NPs you have identified as predicative.</rdfs:comment>
  </owl:Class>
  <owl:Class rdf:about="#Object">
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >(the authors originally used the terms "mention of an object" and "term-denoting noun phrases")
However, as said above, our primary interest in this study is not the (lexical)
semantics of context-dependent expressions, but the way in which context is
constructed and modified (an aspect of language often considered part of pragmatics).
Therefore we are not only interested in cases in which the subsequent
mention of an object is done using reduced forms; we want to track all mentions
of an object through a text, including also cases in which these mentions are
achieved using forms that normally would not be considered anaphoric, such as
proper names like Corning or indefinite NPs like a boxcar .</rdfs:comment>
  </owl:Class>
  <owl:Class rdf:ID="OnMap">
    <rdfs:subClassOf>
      <owl:Class rdf:about="#Attribute"/>
    </rdfs:subClassOf>
    <rdfs:subClassOf>
      <owl:Restriction>
        <owl:onProperty rdf:resource="#hasTier"/>
        <owl:hasValue rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
        >On_map</owl:hasValue>
      </owl:Restriction>
    </rdfs:subClassOf>
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >The next attribute, called On_map, allows you to specify whether the
markable refers to an object on the map. If you set this attribute to the
value “yes”, a second attribute will appear, called Object, which allows
you to specify (using a menu) which object the markable refers to.</rdfs:comment>
  </owl:Class>
  <owl:Class rdf:ID="Segment">
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >non-NP antecedents

The next attribute (of OldReferringExpression) is used to specify the reference type of the markable.
The meanings of the values are:
phrase: Use this value if the markable refers to an object which was
already mentioned using a markable. E.g.,
M: I want you to take [a boxcar] from [Elmira] and
load [it] with [oranges]
it refers to the
same object as a
boxcar
segment: Use this value if the markable refers to an abstract object – for
instance a plan, event, action, or fact – which was discussed in an
earlier segment of the dialogue, but not referred to using a markable.
M: Take [engine E1] to get [the boxcar] to Elmira. this refers to the
plan in the previous
utterance by M
S: All right, [this] will take one hour
Note: subsequent references to the same abstract object should now
be marked as “phrase”, since the object discussed in the segment
has now been mentioned using a markable.

If you select “segment”, then you should also indicate which text region
the markable refers to. You do this by selecting the appropriate lines of
text.</rdfs:comment>
    <rdfs:subClassOf>
      <owl:Class rdf:ID="Markable"/>
    </rdfs:subClassOf>
  </owl:Class>
  <owl:Class rdf:about="#NounPhrase">
    <rdfs:subClassOf>
      <owl:Class rdf:about="#Markable"/>
    </rdfs:subClassOf>
    <rdfs:subClassOf>
      <owl:Restriction>
        <owl:onProperty>
          <owl:ObjectProperty rdf:about="#hasReference"/>
        </owl:onProperty>
        <owl:cardinality rdf:datatype="http://www.w3.org/2001/XMLSchema#int"
        >1</owl:cardinality>
      </owl:Restriction>
    </rdfs:subClassOf>
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Potential anaphoric expression

The primary use of the term ‘anaphora’ is to describe what might also be
called (linguistic) context dependence: namely, the fact that many expressions
of natural language derive at least part of their meaning from the meaning of
expressions previously produced in the same context.

As most anaphoric expressions have a reduced form in comparison with the forms
used to introduce entities in context, by using them language users achieve coherence
(they connect the current utterance to previous ones) in a parsimonious
fashion

we want to track all mentions
of an object through a text, including also cases in which these mentions are
achieved using forms that normally would not be considered anaphoric, such as
proper names like Corning or indefinite NPs like a boxcar .

Many types of natural language expressions can serve an anaphoric function, but
in this study we are only interested in the anaphoric properties of noun phrases
(NPs): expressions whose main word is a noun, like the orange warehouse
or a boxcar , as well as proper names like Bath and pronoun like it .
One of your first tasks when analyzing a markable will be to identify what type
of NP it is, using the attribute reference.</rdfs:comment>
  </owl:Class>
  <owl:Class rdf:about="#TermDenotingNounPhrase">
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Many types of natural language expressions can serve an anaphoric function, but
in this study we are only interested in the anaphoric properties of noun phrases
(NPs): expressions whose main word is a noun, like the orange warehouse
or a boxcar , as well as proper names like Bath and pronoun like it . You will
not have to find the noun phrases yourselves: they have already been identified
and annotated as MMAX2’s markables. (Some errors in identifying them –
incorrect boundaries, missed noun phrases – will no doubt have taken place; it
would be good if you could correct them.) You will however need to find which
among these noun phrases are indeed anaphoric in the sense discussed above.
One of your first tasks when analyzing a markable will be to identify what type
of NP it is, using the attribute reference.
Anaphoric noun phrases are an instance of term-denoting noun phrases,
so the first step towards identifying anaphoric expressions is to learn how to recognize
these. A term-denoting NP is a noun phrase which is used to mention an
object. The most typical examples of term-denoting NPs are proper names such
as Bath or Avon , but many other types of noun phrases are term-denoting –
including for example two boxcars in
There are [two boxcars] in Bath</rdfs:comment>
    <rdfs:subClassOf rdf:resource="#NounPhrase"/>
    <rdfs:subClassOf>
      <owl:Restriction>
        <owl:onProperty>
          <owl:ObjectProperty rdf:ID="hasSemanticCategory"/>
        </owl:onProperty>
        <owl:cardinality rdf:datatype="http://www.w3.org/2001/XMLSchema#int"
        >1</owl:cardinality>
      </owl:Restriction>
    </rdfs:subClassOf>
    <rdfs:subClassOf>
      <owl:Class>
        <owl:unionOf rdf:parseType="Collection">
          <owl:Restriction>
            <owl:onProperty>
              <owl:ObjectProperty rdf:about="#hasAttributeValue"/>
            </owl:onProperty>
            <owl:hasValue>
              <OnMap rdf:ID="notOnMap">
                <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
                >The next attribute, called On_map, allows you to specify whether the
markable refers to an object on the map. If you set this attribute to the
value “yes”, a second attribute will appear, called Object, which allows
you to specify (using a menu) which object the markable refers to.</rdfs:comment>
                <hasTag rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
                >no</hasTag>
              </OnMap>
            </owl:hasValue>
          </owl:Restriction>
          <owl:Restriction>
            <owl:onProperty>
              <owl:ObjectProperty rdf:about="#hasAttributeValue"/>
            </owl:onProperty>
            <owl:hasValue>
              <OnMap rdf:ID="onMap">
                <hasTag rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
                >yes</hasTag>
                <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
                >The next attribute, called On_map, allows you to specify whether the
markable refers to an object on the map. If you set this attribute to the
value “yes”, a second attribute will appear, called Object, which allows
you to specify (using a menu) which object the markable refers to.</rdfs:comment>
              </OnMap>
            </owl:hasValue>
          </owl:Restriction>
        </owl:unionOf>
      </owl:Class>
    </rdfs:subClassOf>
    <owl:equivalentClass>
      <owl:Class>
        <owl:unionOf rdf:parseType="Collection">
          <owl:Class rdf:about="#NewReferringExpression"/>
          <owl:Class rdf:ID="OldReferringExpression"/>
        </owl:unionOf>
      </owl:Class>
    </owl:equivalentClass>
  </owl:Class>
  <owl:Class rdf:about="#Markable">
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Certain phrases in the text are designated as markables: they are delimited
by brackets in the dialogue window, and also appear as a list in
the markables window. Each markable is associated with a series of attributes, and each attribute
with a set of values.

Many types of natural language expressions can serve an anaphoric function, but
in this study we are only interested in the anaphoric properties of noun phrases
(NPs): expressions whose main word is a noun, like the orange warehouse
or a boxcar , as well as proper names like Bath and pronoun like it .</rdfs:comment>
    <rdfs:subClassOf rdf:resource="#Object"/>
  </owl:Class>
  <owl:Class rdf:ID="Gender">
    <rdfs:subClassOf>
      <owl:Class rdf:about="#Attribute"/>
    </rdfs:subClassOf>
    <rdfs:subClassOf>
      <owl:Restriction>
        <owl:hasValue rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
        >Gender</owl:hasValue>
        <owl:onProperty rdf:resource="#hasTier"/>
      </owl:Restriction>
    </rdfs:subClassOf>
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >The first thing you should do is to mark the (syntactic) gender of a markable
using the attribute Gender. The possible values are “masculine”,
“feminine”, “neuter”, or “unspecified” when the NP could be either masculine
of feminine (as in the doctor ) or with coordinated NPs containing
both masculine and feminine NPs (as in John and Mary ).</rdfs:comment>
  </owl:Class>
  <owl:Class rdf:about="#Attribute">
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Each markable is associated with a series of attributes, and each attribute
with a set of values.
As you click on a markable which you haven’t annotated yet, you will see three
attributes: Comment, Gender, and Reference.
§11 You should use the Comment attribute to indicate when you are unsure
about the annotation of a markable, and possibly what you think the
problem was and / or which alternatives you considered.</rdfs:comment>
    <rdfs:subClassOf rdf:resource="http://www.w3.org/2002/07/owl#Thing"/>
    <rdfs:subClassOf>
      <owl:Restriction>
        <owl:onProperty>
          <owl:DatatypeProperty rdf:ID="hasTag"/>
        </owl:onProperty>
        <owl:cardinality rdf:datatype="http://www.w3.org/2001/XMLSchema#int"
        >1</owl:cardinality>
      </owl:Restriction>
    </rdfs:subClassOf>
    <rdfs:subClassOf>
      <owl:Restriction>
        <owl:cardinality rdf:datatype="http://www.w3.org/2001/XMLSchema#int"
        >1</owl:cardinality>
        <owl:onProperty rdf:resource="#hasTier"/>
      </owl:Restriction>
    </rdfs:subClassOf>
  </owl:Class>
  <owl:Class rdf:ID="DeicticReference">
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Language expressions may also depend on the visual, as opposed to verbal,
context. An utterance like Could you pass me the salt? , uttered, e.g.,
at a restaurant, is usually understandable even if salt hasn’t been mentioned
before; the recipient can recover the referent of the expression the salt from
the visual context. (An even clearer example is Could you please close
the window? .) We will use the term deictic references to refer to these
expressions.</rdfs:comment>
    <owl:equivalentClass>
      <owl:Class>
        <owl:intersectionOf rdf:parseType="Collection">
          <owl:Restriction>
            <owl:hasValue rdf:resource="#onMap"/>
            <owl:onProperty>
              <owl:ObjectProperty rdf:about="#hasAttributeValue"/>
            </owl:onProperty>
          </owl:Restriction>
          <owl:Restriction>
            <owl:minCardinality rdf:datatype="http://www.w3.org/2001/XMLSchema#int"
            >1</owl:minCardinality>
            <owl:onProperty>
              <owl:ObjectProperty rdf:ID="pointsTo"/>
            </owl:onProperty>
          </owl:Restriction>
        </owl:intersectionOf>
      </owl:Class>
    </owl:equivalentClass>
    <rdfs:subClassOf rdf:resource="#TermDenotingNounPhrase"/>
  </owl:Class>
  <owl:Class rdf:ID="SemanticCategory">
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >The attribute (Semantic) Category should be used to mark the type of
object the markable refers to, if any.</rdfs:comment>
    <rdfs:subClassOf rdf:resource="#Attribute"/>
    <rdfs:subClassOf>
      <owl:Restriction>
        <owl:hasValue rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
        >Category</owl:hasValue>
        <owl:onProperty rdf:resource="#hasTier"/>
      </owl:Restriction>
    </rdfs:subClassOf>
  </owl:Class>
  <owl:Class rdf:ID="NonReferringType">
    <rdfs:subClassOf>
      <owl:Restriction>
        <owl:onProperty rdf:resource="#hasTier"/>
        <owl:hasValue rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
        >non_ref_type</owl:hasValue>
      </owl:Restriction>
    </rdfs:subClassOf>
    <rdfs:subClassOf rdf:resource="#Attribute"/>
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >non referring: A markable which does not refer to an object, whether
concrete or abstract. If you choose this value, a new attribute,
non_ref_type, will appear:
and you will be requested to indicate why you think this markable is
non-referring by choosing among the classes of non-referring markables
discussed above.
(a) The markable is the word there or it used as placeholder.
Choose the value “Expletive” if you think this is the case.
[There] are two boxcars in Bath
(= “two boxcars are in Bath”)
[It] takes an hour to get to Corning
(= “to get to Corning takes an hour”)
(Keep in mind that other uses of there and it do refer to
concrete or abstract objects, and should be marked as “old” or
“new” as appropriate!)
(b) The markable is a noun phrase used as a predicate, as discussed
above:
The boxcar in Dansville is [a relic]
8
Use the value “Predicate” in this case.
(c) The markable is a noun phrase used as a quantifier, as discussed
above.
Are there [any boxcars] in Dansville?
Use the value “quantifier” in this case.
(d) The markable is part of an idiom, as in what [the heck ]. Use
the value “idiom” in this case.
Do not leave any markables with the value “unmarked” – its purpose is to
serve as an indication that an appropriate value has not yet been selected.</rdfs:comment>
  </owl:Class>
  <owl:Class rdf:about="#OldReferringExpression">
    <rdfs:subClassOf rdf:resource="#TermDenotingNounPhrase"/>
    <owl:equivalentClass>
      <owl:Class>
        <owl:intersectionOf rdf:parseType="Collection">
          <owl:Restriction>
            <owl:onProperty>
              <owl:ObjectProperty rdf:about="#hasAntecedent"/>
            </owl:onProperty>
            <owl:minCardinality rdf:datatype="http://www.w3.org/2001/XMLSchema#int"
            >1</owl:minCardinality>
          </owl:Restriction>
          <owl:Restriction>
            <owl:hasValue>
              <Reference rdf:ID="old">
                <hasTag rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
                >old</hasTag>
                <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
                >A term-denoting markable in the sense discussed above, i.e., which
refers to a concrete or abstract object which has already been mentioned
or discussed earlier in the dialogue.
For example, in the following excerpt, the markable it refers to an
object already mentioned using the phrase a boxcar .
M: I want you to take [a boxcar] from Elmira and
load [it] with oranges
Examples of abstract objects are facts, events, actions, and plans.
For instance, in the example just shown, M is proposing a plan: to
take a boxcar from Elmira and loading it with oranges.
Note that the previous mention of the object need not have been
made with a markable! (See discussion of segment below.)
We will explain below how you can indicate which previously mentioned
object is being referred to in this case.</rdfs:comment>
              </Reference>
            </owl:hasValue>
            <owl:onProperty>
              <owl:ObjectProperty rdf:about="#hasReference"/>
            </owl:onProperty>
          </owl:Restriction>
          <owl:Restriction>
            <owl:cardinality rdf:datatype="http://www.w3.org/2001/XMLSchema#int"
            >1</owl:cardinality>
            <owl:onProperty>
              <owl:ObjectProperty rdf:ID="hasReferenceType"/>
            </owl:onProperty>
          </owl:Restriction>
        </owl:intersectionOf>
      </owl:Class>
    </owl:equivalentClass>
  </owl:Class>
  <owl:ObjectProperty rdf:about="#hasSemanticCategory">
    <rdfs:subPropertyOf>
      <owl:ObjectProperty rdf:about="#hasAttributeValue"/>
    </rdfs:subPropertyOf>
    <rdfs:range rdf:resource="#SemanticCategory"/>
    <rdfs:domain rdf:resource="#TermDenotingNounPhrase"/>
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >The attribute (Semantic) Category should be used to mark the type of
object the markable refers to, if any.</rdfs:comment>
  </owl:ObjectProperty>
  <owl:ObjectProperty rdf:about="#pointsTo">
    <rdfs:subPropertyOf>
      <owl:ObjectProperty rdf:ID="refersTo"/>
    </rdfs:subPropertyOf>
    <rdfs:range rdf:resource="#MapObject"/>
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >points to an object on the map</rdfs:comment>
  </owl:ObjectProperty>
  <owl:ObjectProperty rdf:about="#hasAttributeValue">
    <rdfs:domain rdf:resource="#Markable"/>
    <rdfs:range rdf:resource="#Attribute"/>
  </owl:ObjectProperty>
  <owl:ObjectProperty rdf:about="#hasBridgingType">
    <rdfs:subPropertyOf rdf:resource="#hasAttributeValue"/>
    <rdfs:range rdf:resource="#BridgingType"/>
    <rdfs:domain rdf:resource="#BridgingReference"/>
  </owl:ObjectProperty>
  <owl:ObjectProperty rdf:about="#refersTo">
    <rdfs:domain rdf:resource="#TermDenotingNounPhrase"/>
    <rdfs:range rdf:resource="#Object"/>
  </owl:ObjectProperty>
  <owl:ObjectProperty rdf:ID="hasGender">
    <rdfs:subPropertyOf rdf:resource="#hasAttributeValue"/>
    <rdfs:domain rdf:resource="#NounPhrase"/>
    <rdfs:range rdf:resource="#Gender"/>
  </owl:ObjectProperty>
  <owl:ObjectProperty rdf:about="#hasNonRefType">
    <rdfs:range rdf:resource="#NonReferringType"/>
    <rdfs:subPropertyOf rdf:resource="#hasAttributeValue"/>
    <rdfs:domain>
      <owl:Class>
        <owl:unionOf rdf:parseType="Collection">
          <owl:Class rdf:about="#NonDenotingNounPhrase"/>
          <owl:Class rdf:about="#Predicative"/>
          <owl:Class rdf:about="#QuantifiedNounPhrase"/>
        </owl:unionOf>
      </owl:Class>
    </rdfs:domain>
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >non referring: A markable which does not refer to an object, whether
concrete or abstract. If you choose this value, a new attribute,
non_ref_type, will appear:
and you will be requested to indicate why you think this markable is
non-referring by choosing among the classes of non-referring markables
discussed above.</rdfs:comment>
  </owl:ObjectProperty>
  <owl:ObjectProperty rdf:about="#hasReference">
    <rdfs:range rdf:resource="#Reference"/>
    <rdfs:domain rdf:resource="#NounPhrase"/>
    <rdfs:subPropertyOf rdf:resource="#hasAttributeValue"/>
  </owl:ObjectProperty>
  <owl:ObjectProperty rdf:about="#hasRelatedObject">
    <rdfs:domain rdf:resource="#BridgingReference"/>
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >bridging reference</rdfs:comment>
    <rdfs:subPropertyOf rdf:resource="#refersTo"/>
    <rdfs:range rdf:resource="#Markable"/>
  </owl:ObjectProperty>
  <owl:ObjectProperty rdf:about="#hasReferenceType">
    <rdfs:domain rdf:resource="#OldReferringExpression"/>
    <rdfs:range rdf:resource="#ReferenceType"/>
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >The next attribute is used to specify the reference type of the markable.
The meanings of the values are:
phrase: Use this value if the markable refers to an object which was
already mentioned using a markable. E.g.,
M: I want you to take [a boxcar] from [Elmira] and
load [it] with [oranges]
it refers to the
same object as a
boxcar
segment: Use this value if the markable refers to an abstract object – for
instance a plan, event, action, or fact – which was discussed in an
earlier segment of the dialogue, but not referred to using a markable.
M: Take [engine E1] to get [the boxcar] to Elmira. this refers to the
plan in the previous
utterance by M
S: All right, [this] will take one hour
Note: subsequent references to the same abstract object should now
be marked as “phrase”, since the object discussed in the segment
has now been mentioned using a markable.</rdfs:comment>
    <rdfs:subPropertyOf rdf:resource="#hasAttributeValue"/>
  </owl:ObjectProperty>
  <owl:ObjectProperty rdf:about="#hasAntecedent">
    <rdfs:range rdf:resource="#Markable"/>
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >The next attribute is used to specify the reference type of the markable.
The meanings of the values are:
phrase: Use this value if the markable refers to an object which was
already mentioned using a markable. E.g.,
M: I want you to take [a boxcar] from [Elmira] and
load [it] with [oranges]
it refers to the
same object as a
boxcar
segment: Use this value if the markable refers to an abstract object – for
instance a plan, event, action, or fact – which was discussed in an
earlier segment of the dialogue, but not referred to using a markable.
M: Take [engine E1] to get [the boxcar] to Elmira. this refers to the
plan in the previous
utterance by M
S: All right, [this] will take one hour
Note: subsequent references to the same abstract object should now
be marked as “phrase”, since the object discussed in the segment
has now been mentioned using a markable.
§24 If you select “phrase”, then you should also indicate the most recent
mention of the object that the markable refers to.

If a markable refers to an object that was mentioned earlier in the dialogue
more than once, mark a reference to the most recent mention.</rdfs:comment>
    <rdfs:subPropertyOf rdf:resource="#refersTo"/>
  </owl:ObjectProperty>
  <owl:DatatypeProperty rdf:ID="hasComment">
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >As you click on a markable which you haven’t annotated yet, you will see three
attributes: Comment, Gender, and Reference.
§11 You should use the Comment attribute to indicate when you are unsure
about the annotation of a markable, and possibly what you think the
problem was and / or which alternatives you considered.</rdfs:comment>
    <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
    <rdfs:domain rdf:resource="#Markable"/>
  </owl:DatatypeProperty>
  <BridgingType rdf:ID="other">
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >other relations A third case of bridging reference we want to mark are expressions
containing the word other and referring to a second object of the
same type as an object already mentioned. E.g., in the TRAINS dialogues
it is common to first talk about one engine, then introduce a second engine,
and then return talking about the first engine by saying the other
engine . These cases, as well, should be marked as Related.</rdfs:comment>
    <hasTag rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >other</hasTag>
  </BridgingType>
  <BridgingType rdf:ID="part_of">
    <hasTag rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >part_of</hasTag>
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >part relations The wheel in the example above is an example of markable
referring to an object that stands in a part-of relation to an object previously
mentioned. You should mark these markables as Related using the
instructions below.</rdfs:comment>
  </BridgingType>
  <ReferenceType rdf:ID="segment">
    <hasTag rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >segment</hasTag>
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >segment: Use this value if the markable refers to an abstract object – for
instance a plan, event, action, or fact – which was discussed in an
earlier segment of the dialogue, but not referred to using a markable.
M: Take [engine E1] to get [the boxcar] to Elmira. this refers to the
plan in the previous
utterance by M
S: All right, [this] will take one hour
Note: subsequent references to the same abstract object should now
be marked as “phrase”, since the object discussed in the segment
has now been mentioned using a markable.</rdfs:comment>
  </ReferenceType>
  <SemanticCategory rdf:ID="concrete">
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >(non-animate) concrete: to be used for all other concrete but not animate objects,
such as engines, boxcars, etc.</rdfs:comment>
    <hasTag rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >concrete</hasTag>
  </SemanticCategory>
  <SemanticCategory rdf:ID="person">
    <hasTag rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >person</hasTag>
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >person: this value should be used for all markables that refer to people</rdfs:comment>
  </SemanticCategory>
  <RelatedObject rdf:ID="noRelatedObject">
    <hasTag rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >no</hasTag>
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >19 The next attribute, related_object, is to be set to “yes” when the markable
is a bridging reference in the sense discussed above. When you do so,
you should also indicate the most recent mention of an object to which
the reference of the markable is related</rdfs:comment>
  </RelatedObject>
  <NonReferringType rdf:ID="unmarked">
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Do not leave any markables with the value “unmarked” – its purpose is to
serve as an indication that an appropriate value has not yet been selected.</rdfs:comment>
    <hasTag rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >unmarked</hasTag>
  </NonReferringType>
  <SemanticCategory rdf:ID="animate">
    <hasTag rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >animate</hasTag>
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >(non-person) animate: use this value for markables that refer to other animate
objects (animals, etc)</rdfs:comment>
  </SemanticCategory>
  <ReferenceType rdf:ID="phrase">
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >phrase: Use this value if the markable refers to an object which was
already mentioned using a markable. E.g.,
M: I want you to take [a boxcar] from [Elmira] and
load [it] with [oranges]</rdfs:comment>
    <hasTag rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >phrase</hasTag>
  </ReferenceType>
  <BridgingType rdf:ID="set">
    <hasTag rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >set</hasTag>
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >set relations One class of relations of interest are those that hold between
a set and its elements, or between a set and a subset. For example,
after uttering there are two boxcars at Bath (thus introducing a
set of two boxcars) a speaker may say we should send [one ] to Avon
or we should send [one boxcar ] to Avon . Both [one ] and [one
boxcar ] are references to elements of the set introduced in the previous
utterance. Again, you should annotate these markables as Related. Or
after saying We have [three engines ] in total we may say [Two ]
are at Elmira ; in this case, the markable [Two ] refers to a subset of
the set of three engines mentioned in the first utterance, and again should
be marked as related.</rdfs:comment>
  </BridgingType>
  <Gender rdf:ID="neuter">
    <hasTag rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >neuter</hasTag>
  </Gender>
  <SemanticCategory rdf:ID="unknown">
    <hasTag rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >unknown</hasTag>
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >unknown: for markables that could be either abstract or concrete.</rdfs:comment>
  </SemanticCategory>
  <Gender rdf:ID="masculine">
    <hasTag rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >masculine</hasTag>
  </Gender>
  <SemanticCategory rdf:ID="abstract">
    <hasTag rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >abstract</hasTag>
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >(other) abstract: other abstract references which are not temporal expressions
and are not plans (e.g., the law , injustice , art ).</rdfs:comment>
  </SemanticCategory>
  <Gender rdf:ID="feminine">
    <hasTag rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >feminine</hasTag>
  </Gender>
  <Gender rdf:ID="unspecified">
    <hasTag rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >unspecified</hasTag>
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >“unspecified” when the NP could be either masculine
of feminine (as in the doctor ) or with coordinated NPs containing
both masculine and feminine NPs (as in John and Mary ).</rdfs:comment>
  </Gender>
  <SemanticCategory rdf:ID="space">
    <hasTag rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >space</hasTag>
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >space: for spatial locations (this includes towns, paths, or routes)</rdfs:comment>
  </SemanticCategory>
  <BridgingType rdf:ID="misc">
    <hasTag rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >misc</hasTag>
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >misc You’ll sometimes find clear cases of bridging references that do not fall
into any of the categories above. You should set aside these cases for
discussion and we’ll decide what to do with them.</rdfs:comment>
  </BridgingType>
  <SemanticCategory rdf:ID="time">
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >time: for all markables referring to temporal periods.</rdfs:comment>
    <hasTag rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >time</hasTag>
  </SemanticCategory>
  <SemanticCategory rdf:ID="plan">
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >plan: for all markables referring to actions and plans.</rdfs:comment>
    <hasTag rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >plan</hasTag>
  </SemanticCategory>
</rdf:RDF>

<!-- Created with Protege (with OWL Plugin 3.3.1, Build 430)  http://protege.stanford.edu -->
